name: auto build release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-production:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [16.x]
        os: [windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2   # 第一步，检出仓库副本

    - name: Use Node.js ${{ matrix.node-version }} #规定node.js版本(可不配置)
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Install dependencies  # 第二步，安装依赖
      run: npm install

    - name: build windows app
      if: matrix.os == 'windows-latest'
      run: npm run electron:build --if-present
 
    - name: build mac app
      if: matrix.os == 'macos-latest'
      run: npm run electron:build --if-present

    - name: ls before rimraf
      run: |
        ls dist_electron

    - name: cleanup artifacts for windows
      if: matrix.os == 'windows-latest'
      run: |
        npx rimraf "dist_electron/!(*.exe)"

    - name: cleanup artifacts for macos
      if: matrix.os == 'macos-latest'
      run: |
        npx rimraf "dist_electron/!(*.dmg)"

    - name: ls after rimraf
      run: |
        ls dist_electron

    # step6: upload artifacts
    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: picable-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os }}-Demo
        path: dist_electron

    # step7: create release
    - name: release
      uses: softprops/action-gh-release@v1
      with:
        files: "dist_electron/**"
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
